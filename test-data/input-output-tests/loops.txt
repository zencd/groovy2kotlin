class Temp {
    static void for_in() {
        for (xxx in [1, 2, 3]) {
            println(xxx)
        }
    }
    static void while_loop() {
        while(false) {
        }
    }
    static void for_ever() {
        for (;;) {}
    }
    static void for3_with_block() {
        for (int i = 0; i < 3; i++) {
            println("1")
            println("2")
        }
    }
    static void for3_no_block() {
        for (int i = 0; i < 3; i++) println("1")
    }
    static void for3_only_init() {
        for (int i = 0;;) println("1")
    }
    static void for3_only_check() {
        int i = 0
        for (; i < 3;) println("1")
    }
    static void for3_only_update() {
        int i = 0
        for (;; i++) println("1")
    }
    static void loop_continue() {
        while (false) {continue}
    }
    static void loop_continue_labeled() {
        label: while (false) {continue label}
    }
    static void loop_break() {
        while (false) {break}
    }
    static void loop_break_labeled() {
        label: while (false) {break label}
    }
}
---------------
$DEFAULT_IMPORTS
open class Temp {
    companion object {

        fun for_in() {
            for (xxx in listOf(1, 2, 3)) {
                println(xxx)
            }
        }

        fun while_loop() {
            while (false) {
            }
        }

        fun for_ever() {
            while (true) {
            }
        }

        fun for3_with_block() {
            val i: Int = 0
            while (i < 3) {
                println("1")
                println("2")
                i++
            }
        }

        fun for3_no_block() {
            val i: Int = 0
            while (i < 3) {
                println("1")
                i++
            }
        }

        fun for3_only_init() {
            val i: Int = 0
            while (true)             println("1")

        }

        fun for3_only_check() {
            val i: Int = 0
            while (i < 3)             println("1")

        }

        fun for3_only_update() {
            val i: Int = 0
            while (true) {
                println("1")
                i++
            }
        }

        fun loop_continue() {
            while (false) {
                continue
            }
        }

        fun loop_continue_labeled() {
            @label
            while (false) {
                continue@label
            }
        }

        fun loop_break() {
            while (false) {
                break
            }
        }

        fun loop_break_labeled() {
            @label
            while (false) {
                break@label
            }
        }
    }
}